#include "arduino_secrets.h"
#include <WiFi101.h>#include <RTCZero.h>#include <PubSubClient.h>#include "DHT.h"char* mySSID = SECRET_SSID;char* myPW = SECRET_PW;// MQTT (CloudMQTT)const char* BROKER = "m20.cloudmqtt.com";uint16_t    BRPORT = 12394;const char* BRUSER = "rawyjpid";const char* BRPWD  = "ah52k3gjd8JS";const char* CLIENTID = "MKR1000";#define DHTTYPE DHT11   // DHT 11//#define DHTTYPE DHT21   // DHT 21 (AM2301)//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321#define uS_TO_S_FACTOR 1000000int length;/* create an instance of PubSubClient client */WiFiClient MKR1000Client;PubSubClient client(MKR1000Client);/* Create an rtc object */RTCZero rtc;/* Change these values to define the wakeup periode */byte wakeupSeconds = 0;byte wakeupMinutes = 1;byte wakeupHours = 0;/* Change these values to set the current initial time */const byte seconds = 0;const byte minutes = 0;const byte hours = 0;/* Change these values to set the current initial date */const byte day = 1;const byte month = 1;const byte year = 2018;bool matched = true;// Temporary variableschar msg[20];/* topics */#define TEMP_TOPIC    "MKR1000/temp"#define HUMI_TOPIC    "MKR1000/humi"void setup() {  pinMode(LED_BUILTIN, OUTPUT);  digitalWrite(LED_BUILTIN, LOW);    rtc.begin();  rtc.setTime(hours, minutes, seconds);  rtc.setDate(day, month, year);  rtc.setAlarmTime(hours + wakeupHours, minutes + wakeupMinutes, seconds + wakeupSeconds);  rtc.enableAlarm(rtc.MATCH_HHMMSS);  rtc.attachInterrupt(alarmMatch);    connectWiFi();  configureMQTT();}void loop() {  if (matched) {    matched = false;    //---------------------------------------    // Include appplication code here    run_application();    //---------------------------------------        rtc.setTime(hours, minutes, seconds);    rtc.setAlarmTime(hours + wakeupHours, minutes + wakeupMinutes, seconds + wakeupSeconds);    rtc.standbyMode();    // Sleep until next alarm match  }}void alarmMatch() {  matched = true;}